package com.sfa.service.controller;

import java.util.*;

public class Test {

	/**
	 * 每日温度
	 *
	 * @param T
	 * @return
	 */
	public int[] dailyTemperatures(int[] T) {
		int length = T.length;
		int[] ans = new int[length];
		Deque<Integer> stack = new LinkedList<>();
		for (int i = 0; i < length; i++) {
			int temperature = T[i];
			while (!stack.isEmpty() && temperature > T[stack.peek()]) {
				int prevIndex = stack.pop();
				ans[prevIndex] = i - prevIndex;
			}
			stack.push(i);
		}
		return ans;
	}

	/**
	 * 回文子串
	 *
	 * @param s
	 * @return
	 */
	public int countSubstring(String s) {
		boolean[][] dp = new boolean[s.length()][s.length()];
		int ans = 0;
		for (int j = 0; j < s.length(); j++) {
			for (int i = 0; i <= j; i++) {
				if (s.charAt(i) == s.charAt(j) && (j - i < 2 || dp[i + 1][j - 1])) {
					dp[i][j] = true;
					ans++;
				}
			}
		}
		return ans;
	}

	/**
	 * 任务调度器
	 *
	 * @param tasks
	 * @param n
	 * @return
	 */
	public int leastInterval(char[] tasks, int n) {
		int[] arr = new int[26];
		for (char ch : tasks) {
			arr[ch - 'A']++;
		}
		int maxNum = Arrays.stream(arr).max().getAsInt();
		int q = 0;
		for (int a : arr) {
			if (a == maxNum) {
				q++;
			}
		}
		int res = (maxNum - 1) * (n + 1) + q;
		return res > tasks.length ? res : tasks.length;
	}

	class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;

		TreeNode() {
		}

		TreeNode(int val) {
			this.val = val;
		}

		TreeNode(int val, TreeNode left, TreeNode right) {
			this.val = val;
			this.left = left;
			this.right = right;
		}
	}

	/**
	 * 合并二叉树
	 *
	 * @param root1
	 * @param root2
	 * @return
	 */
	public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
		if (root1 == null || root2 == null) {
			return root1 == null ? root2 : root1;
		}
		root1.val += root2.val;
		TreeNode leftSubTree = mergeTrees(root1.left, root2.left);
		TreeNode rightSubTree = mergeTrees(root1.right, root2.right);
		root1.left = leftSubTree;
		root1.right = rightSubTree;
		return root1;
	}

	/**
	 * 最短无序连续子数组
	 *
	 * @param nums
	 * @return
	 */
	public int findUnsortedSubarray(int[] nums) {
		int len = nums.length;
		int min = nums[len - 1];
		int max = nums[0];
		int begin = 0;
		int end = -1;
		for (int i = 0; i < len; i++) {
			if (nums[i] < max) {
				end = i;
			} else {
				max = nums[i];
			}
			if (nums[len - i - 1] > min) {
				begin = len - i - 1;
			} else {
				min = nums[len - i - 1];
			}
		}
		return end - begin + 1;
	}

	/**
	 * 和为K的子数组
	 *
	 * @param nums
	 * @param k
	 * @return
	 */
	public int subarraySum(int[] nums, int k) {
		if (nums.length == 0) {
			return 0;
		}
		Map<Integer, Integer> map = new HashMap<>();
		map.put(0, 1);
		int count = 0;
		int preSum = 0;
		for (int x : nums) {
			preSum += x;
			if (map.containsKey(preSum - k)) {
				count += map.get(preSum - k);
			}
			map.put(preSum, map.getOrDefault(preSum, 0) + 1);
		}
		return count;
	}


	int max = 0;

	/**
	 * 二叉树的直径
	 *
	 * @param root
	 * @return
	 */
	public int diameterOfBinaryTree(TreeNode root) {
		if (root == null) {
			return 0;
		}
		depth(root);
		return max;
	}

	public int depth(TreeNode node) {
		if (node == null) {
			return 0;
		}
		int left = depth(node.left);
		int right = depth(node.right);
		max = Math.max(left + right, max);
		return Math.max(left, right) + 1;
	}

	int sum = 0;

	/**
	 * 把二叉搜索树转换为累加树
	 *
	 * @param root
	 * @return
	 */
	public TreeNode convertBST(TreeNode root) {
		if (root != null) {
			convertBST(root.right);
			sum += root.val;
			root.val = sum;
			convertBST(root.left);
		}
		return root;
	}

	/**
	 * 汉明距离
	 *
	 * @param x
	 * @param y
	 * @return
	 */
	public int hammingDistance(int x, int y) {
		int xor = x ^ y;
		int distance = 0;
		while (xor != 0) {
			if (xor % 2 == 1) {
				distance += 1;
			}
			xor = xor >> 1;
		}
		return distance;
	}

	/**
	 * 找到所有数组中消失的数字
	 *
	 * @param nums
	 * @return
	 */
	public List<Integer> findDisappearedNumbers(int[] nums) {
		int n = nums.length;
		for (int num : nums) {
			int x = (num - 1) % n;
			nums[x] += n;
		}
		List<Integer> ret = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			if (nums[i] <= n) {
				ret.add(i + 1);
			}
		}
		return ret;
	}

	/**
	 * 找到字符串中所有字母异位词
	 *
	 * @param s
	 * @param p
	 * @return
	 */
	public List<Integer> findAnagrams(String s, String p) {
		List<Integer> resultList = new ArrayList<>();
		//计算字符串p中各元素的出现次数
		int[] pFreq = new int[26];
		for (int i = 0; i < p.length(); i++) {
			pFreq[p.charAt(i) - 'a']++;
		}
		//窗口区间为[start,end]
		int start = 0;
		int end = -1;
		while (start < s.length()) {
			//还有剩余元素未考察，且窗口内字符串长度小于字符串p的长度，则扩大窗口右侧边界
			if (end + 1 < s.length() && end - start + 1 < p.length()) {
				end++;
			} else {
				//右侧边界不能继续扩大或窗口内字符串长度等于字符串p的长度，则缩小左侧边界
				start++;
			}
			//当窗口内字符串长度等于字符串p的长度时，则判断其是不是字符串p的字母异位词子串
			if (end - start + 1 == p.length() && isAnagrams(s.substring(start, end + 1), pFreq)) {
				resultList.add(start);
			}

		}
		return resultList;
	}

	//判断当前子串是不是字符串p的字母异位词
	private boolean isAnagrams(String widow, int[] pFreq) {
		//计算窗口内字符串各元素的出现次数
		int[] windowFreq = new int[26];
		for (int i = 0; i < widow.length(); i++) {
			windowFreq[widow.charAt(i) - 'a']++;
		}
		//比较窗口内各元素的出现次数和字符串p中各元素的出现次数是否一样
		//如果都一样，则说明窗口内的字符串是字符串p的字母异位子串
		//如果不一样，则说明不是其子串
		for (int j = 0; j < 26; j++) {
			if (windowFreq[j] != pFreq[j]) {
				return false;
			}
		}
		return true;
	}

	/**
	 * 两数之和
	 *
	 * @param nums
	 * @param target
	 * @return
	 */
	public int[] twoSum(int[] nums, int target) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < nums.length; i++) {
			if (map.containsKey(target - nums[i])) {
				return new int[]{map.get(target - nums[i]), i};
			}
			map.put(nums[i], i);
		}
		return new int[0];
	}

	class ListNode {
		int val;
		ListNode next;

		ListNode(int x) {
			val = x;
		}
	}

	/**
	 * 两数之和
	 *
	 * @param l1
	 * @param l2
	 * @return
	 */
	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		ListNode pre = new ListNode(0);
		ListNode cur = pre;
		int carry = 0;
		while (l1 != null || l2 != null) {
			int x = l1 == null ? 0 : l1.val;
			int y = l2 == null ? 0 : l2.val;
			int sum = x + y + carry;

			carry = sum / 10;
			sum = sum % 10;
			cur.next = new ListNode(sum);

			cur = cur.next;
			if (l1 != null) {
				l1 = l1.next;
			}
			if (l2 != null) {
				l2 = l2.next;
			}
		}
		if (carry == 1) {
			cur.next = new ListNode(carry);
		}
		return pre.next;
	}


	/**
	 * 无重复字符的最长子串
	 *
	 * @param s
	 * @return
	 */
	public int lengthOfLongestSubstring(String s) {
		int n = s.length();
		int ans = 0;
		Map<Character, Integer> map = new HashMap<>();
		for (int end = 0, start = 0; end < n; end++) {
			char alpha = s.charAt(end);
			if (map.containsKey(alpha)) {
				start = Math.max(map.get(alpha), start);
			}
			ans = Math.max(ans, end - start + 1);
			map.put(s.charAt(end), end + 1);
		}
		return ans;
	}


	/**
	 * 有效的括号
	 *
	 * @param s
	 * @return
	 */
	public boolean isValid(String s) {
		int n = s.length();
		if (n % 2 == 1) {
			return false;
		}
		Map<Character, Character> pairs = new HashMap<Character, Character>() {{
			put(')', '(');
			put(']', '[');
			put('}', '{');
		}};
		Deque<Character> stack = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			char ch = s.charAt(i);
			if (pairs.containsKey(ch)) {
				if (stack.isEmpty() || !stack.peek().equals(pairs.get(ch))) {
					return false;
				}
				stack.pop();
			} else {
				stack.push(ch);
			}
		}
		return stack.isEmpty();
	}

	/**
	 * 合并两个有序链表
	 *
	 * @param l1
	 * @param l2
	 * @return
	 */
	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		if (l1 == null) {
			return l2;
		}
		if (l2 == null) {
			return l1;
		}
		if (l1.val < l2.val) {
			l1.next = mergeTwoLists(l1.next, l2);
			return l1;
		} else {
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}


	}

}
